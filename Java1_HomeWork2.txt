1. «адать целочисленный массив, состо€щий из элементов 0 и 1. Ќапример: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. — помощью цикла и услови€ заменить 0 на 1, 1 на 0;
        int[] arr1 = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
        for (int i = 0; i < arr1.length; i++) {
            if (arr1[i] == 0) {
                arr1[i] = 1;
            }
            else if (arr1[i] == 1) {
                arr1[i] = 0;
            }
        }
	
2. «адать пустой целочисленный массив размером 8. — помощью цикла заполнить его значени€ми 0 3 6 9 12 15 18 21;
        int[] arr2 = new int[8];
        for (int i = 0; i < arr2.length; i++) {
            arr2[i] = i * 3;
        }

3. «адать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ], пройти по нему циклом, и числа, меньшие 6, умножить на 2;
        int[] arr3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr3.length; i++) {
            if (arr3[i] < 6) {
                arr3[i] = arr3[i] * 2;
            }
        }

4. —оздать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое), и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
        int[][] arr4 = new int[4][4];
        for (int i = 0; i < arr4.length; i++) {
            arr4[i][i] = 1;
        }

5. «адать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);
        int[] arr5 = {1, 4, 5, 3, 1, 8, 6, 5, 3, 1};
        int max = arr5[0];
        int max_index = 0;
        int min = arr5[0];
        int min_index = 0;
        for (int i = 1; i < arr5.length; i++) {
            if (arr5[i] > max) {
                max = arr5[i];
                max_index = i;
            }
            if (arr5[i] < min) {
                min = arr5[i];
                min_index = i;
            }
        }
        System.out.println(max + " " + max_index);
        System.out.println(min + " " + min_index);

6. Ќаписать метод, в который передаетс€ не пустой одномерный целочисленный массив, метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны. ѕримеры: checkBalance([1, 1, 1, || 2, 1]) > true, checkBalance ([2, 1, 1, 2, 1]) > false, checkBalance ([10, || 10]) > true, граница показана символами ||, эти символы в массив не вход€т;
    static boolean checkBalance(int[] arr6) {
        int sumL, sumR;
        for (int i = 1; i < arr6.length; i++) {
            sumL =  0;
            for (int j = 0; j < i; j++) {
                sumL = sumL + arr6[j];
            }
            sumR = 0;
            for (int n = i; n < arr6.length; n++) {
                sumR = sumR + arr6[n];
            }
            if (sumL == sumR) {
                return true;
            }
        }
        return false;
    }

7. *Ќаписать метод, которому на вход подаетс€ одномерный массив и число n (может быть положительным или отрицательным), при этом метод должен сместить все элементы массива на n позиций. Ќельз€ пользоватьс€ вспомогательными массивами.
    static void moveElements(int[] arr7, int n) {
        int k;
        if (n > 0) {
            for (int j = 1; j <= n; j++) {
                k = arr7[arr7.length - 1];
                for (int i = arr7.length - 1; i > 0; i--) {
                    arr7[i] = arr7[i-1];
                }
                arr7[0] = k;
            }
        } else if (n < 0) {
            for (int j = -1; j >= n; j--) {
                k = arr7[0];
                for (int i = 0; i < arr7.length-1; i++) {
                    arr7[i] = arr7[i+1];
                }
                arr7[arr7.length - 1] = k;
            }
        }
        for (int i = 0; i < arr7.length; i++) {
            System.out.print(arr7[i] + " ");
        }
    }












































